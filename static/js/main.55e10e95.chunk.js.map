{"version":3,"sources":["Header/Header.js","Hangman/index.js","Letters/Letters.js","Letters/LetterInput.js","GameResult/index.js","App.js","serviceWorker.js","index.js"],"names":["props","incorrectLetters","length","classNames","body","legs","className","onLetterClicked","Array","from","map","letter","key","onClick","handleClick","disabled","includes","chosenWord","correctLetters","useState","value","setValue","useEffect","_","idx","result","onRestartClick","RANDOM_WORDS","Boolean","window","location","hostname","match","ReactDOM","render","gameState","setGameState","gameResult","setGameResult","setCorrectLetters","setInorrectLetters","setChosenWord","loading","setLoading","startGame","Math","round","random","endGame","getUniqueLetters","word","letterArray","i","len","push","comapreArrayKeys","array1","array2","wordArray","count","Fragment","Hangman","toUpperCase","String","newCorrectLetters","concat","GameResult","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.55e10e95.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../Header/Header.scss';\r\n\r\nexport default () => {\r\n  return <h1>React Hangman</h1>;\r\n};\r\n","import React from 'react';\r\nimport '../Hangman/style.scss';\r\n\r\nexport default (props) => {\r\n  const incorrectLetters = props.incorrectLetters.length;\r\n\r\n  const classNames = {\r\n    body: `\r\n      ${incorrectLetters >= 2 ? 'body' : ''}\r\n      ${incorrectLetters >= 3 ? 'one-handed' : ''}\r\n      ${incorrectLetters >= 4 ? 'two-handed' : ''}\r\n    `,\r\n    legs: `\r\n      legs\r\n      ${incorrectLetters >= 5 ? 'one-legged' : ''}\r\n      ${incorrectLetters >= 6 ? 'two-legged' : ''}\r\n    `,\r\n  };\r\n\r\n  return (\r\n    <div className='hangman'>\r\n      <div className='stand'>\r\n        <div className='stand1' />\r\n        <div className='stand2' />\r\n        <div className='stand3' />\r\n      </div>\r\n      <div className='person'>\r\n        {incorrectLetters >= 1 && <div className='head' />}\r\n        <div className={classNames.body} />\r\n        <div className={classNames.legs} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport '../Letters/Letters.scss';\r\n\r\nexport default (props) => {\r\n  const { onLetterClicked, incorrectLetters } = props;\r\n  const letters = 'abcdefghijklmnopqrstuvwxyz';\r\n\r\n  const handleClick = (letter) => {\r\n    onLetterClicked(letter);\r\n  };\r\n\r\n  return (\r\n    <div className='letters'>\r\n      {Array.from(letters).map((letter) => {\r\n        return (\r\n          <button key={letter} onClick={() => handleClick(letter)} disabled={incorrectLetters.includes(letter)}>\r\n            {letter}\r\n          </button>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport '../Letters/LetterInput.scss';\r\n\r\nexport default (props) => {\r\n  const { chosenWord, correctLetters } = props;\r\n  const [value, setValue] = useState(chosenWord);\r\n\r\n  useEffect(() => {\r\n    setValue(chosenWord);\r\n  }, [chosenWord]);\r\n\r\n  return (\r\n    <div className='word'>\r\n      {[...Array(value.length)].map((_, idx) => {\r\n        return <input key={idx} value={correctLetters.includes(value[idx]) ? chosenWord[idx] : ''} disabled></input>;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport './style.scss';\r\n\r\nexport default (props) => {\r\n  const { result, onRestartClick } = props;\r\n\r\n  return (\r\n    <div className='dialog'>\r\n      <p>You {result}!</p>\r\n      <button onClick={onRestartClick}>Restart</button>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport Header from './Header/Header.js';\r\nimport Hangman from './Hangman';\r\nimport Letters from './Letters/Letters.js';\r\nimport LetterInput from './Letters/LetterInput.js';\r\nimport GameResult from './GameResult';\r\nimport './App.scss';\r\n\r\nconst RANDOM_WORDS = [\r\n  'artichoke',\r\n  'broccoli',\r\n  'celery',\r\n  'fennel',\r\n  'kale',\r\n  'rosemary',\r\n  'onion',\r\n  'pepper',\r\n  'carrot',\r\n  'tomato',\r\n  'ginger',\r\n  'potato',\r\n];\r\n\r\nexport default () => {\r\n  const [gameState, setGameState] = useState(false);\r\n  const [gameResult, setGameResult] = useState(null);\r\n  const [correctLetters, setCorrectLetters] = useState([]);\r\n  const [incorrectLetters, setInorrectLetters] = useState([]);\r\n  const [chosenWord, setChosenWord] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (!gameState && gameResult === null) {\r\n      startGame();\r\n      setLoading(false);\r\n    }\r\n  }, [gameState, gameResult]);\r\n\r\n  const startGame = () => {\r\n    setGameState(true);\r\n    setGameResult(null);\r\n    setCorrectLetters([]);\r\n    setInorrectLetters([]);\r\n    setChosenWord(RANDOM_WORDS[Math.round(Math.random() * RANDOM_WORDS.length)]);\r\n  };\r\n\r\n  const endGame = (result) => {\r\n    setGameResult(result);\r\n    setGameState(false);\r\n  };\r\n\r\n  const handleLetterClick = (letter) => {\r\n    if (!gameState) {\r\n      startGame();\r\n    }\r\n\r\n    if (chosenWord.toUpperCase().includes(String(letter).toUpperCase()) && !correctLetters.includes(letter)) {\r\n      const newCorrectLetters = correctLetters.concat(letter);\r\n      setCorrectLetters(newCorrectLetters);\r\n      if (comapreArrayKeys(newCorrectLetters, getUniqueLetters(Array.from(chosenWord)))) {\r\n        endGame('won');\r\n      }\r\n    } else {\r\n      setInorrectLetters(incorrectLetters.concat(letter));\r\n      if (incorrectLetters.length === 6) {\r\n        endGame('lost');\r\n      }\r\n    }\r\n  };\r\n\r\n  const getUniqueLetters = (word) => {\r\n    const letterArray = [];\r\n    for (let i = 0, len = word.length; i < len; i++) {\r\n      if (letterArray.includes(word[i])) {\r\n        continue;\r\n      }\r\n      letterArray.push(word[i]);\r\n    }\r\n    return letterArray;\r\n  };\r\n\r\n  const comapreArrayKeys = (array1, array2) => {\r\n    if (array1 === array2) return true;\r\n    const wordArray = getUniqueLetters(array1);\r\n    if (wordArray.length !== array2.length) return false;\r\n    for (let i = 0, len = array2.length, count = 0; i < array2.length; i++) {\r\n      if (wordArray.includes(array2[i])) {\r\n        count++;\r\n      }\r\n      if (count === len) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n\r\n  return (\r\n    <div className='app'>\r\n      <Header />\r\n      {!loading && (\r\n        <React.Fragment>\r\n          <Hangman incorrectLetters={incorrectLetters} />\r\n          <LetterInput chosenWord={chosenWord} correctLetters={correctLetters} />\r\n          <Letters onLetterClicked={handleLetterClick} incorrectLetters={incorrectLetters} />\r\n        </React.Fragment>\r\n      )}\r\n      {(!gameState && gameResult) && <GameResult result={gameResult} onRestartClick={startGame} />}\r\n    </div>\r\n  );\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}